// <auto-generated />
using System;
using HotelBookingApp.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelBookingApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241106172551_rooms")]
    partial class rooms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StarRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Hotels", (string)null);
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.HotelAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("HotelAmenities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("77e09615-3b06-4b9e-bfda-42f9954b645c"),
                            IconClass = "bi bi-wifi",
                            Name = "Free Wi-Fi"
                        },
                        new
                        {
                            Id = new Guid("019a9a25-3f37-4252-94ad-b1e326048f27"),
                            IconClass = "bi bi-car-front",
                            Name = "Parking"
                        },
                        new
                        {
                            Id = new Guid("7e61c33c-3032-4c86-99d2-af4b5bdbecda"),
                            IconClass = "bi bi-water",
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = new Guid("4e56230d-1eb9-467d-90e2-19eb9f3e4354"),
                            IconClass = "bi bi-bar-chart-line",
                            Name = "Fitness Center"
                        },
                        new
                        {
                            Id = new Guid("9c8d381e-7c71-4cf8-b4c4-bf8df2188b8b"),
                            IconClass = "bi bi-shop",
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = new Guid("c7a0de2d-1764-4267-be98-db9bf698f1e0"),
                            IconClass = "bi bi-house-door",
                            Name = "Room Service"
                        },
                        new
                        {
                            Id = new Guid("ac565131-0ae2-412d-a5f8-41fd09aef005"),
                            IconClass = "bi bi-basket",
                            Name = "Laundry Service"
                        },
                        new
                        {
                            Id = new Guid("29cb77b9-3b8b-47d4-b34c-ebcfac0d6abb"),
                            IconClass = "bi bi-thermometer-sun",
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = new Guid("483f8ffa-a77e-4c86-8afc-cb54a19ce656"),
                            IconClass = "bi bi-briefcase",
                            Name = "Business Center"
                        },
                        new
                        {
                            Id = new Guid("2fda898d-3133-4143-a1e1-a5813ef8e06f"),
                            IconClass = "bi bi-megaphone",
                            Name = "Conference Room"
                        },
                        new
                        {
                            Id = new Guid("dc04d245-4abb-4e42-821f-7ac1a25d6dd9"),
                            IconClass = "bi bi-slash-circle",
                            Name = "Non-Smoking Rooms"
                        },
                        new
                        {
                            Id = new Guid("e684f0c8-fec6-40df-872d-cd5203851912"),
                            IconClass = "bi bi-airplane-engines",
                            Name = "Airport Shuttle"
                        });
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.RoomAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomAmenity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90547c77-1d61-43ae-a9cd-dcf997efe720"),
                            IconClass = "bi bi-tv",
                            Name = "Television"
                        },
                        new
                        {
                            Id = new Guid("64a58c77-cd2c-468b-a46a-772bd5625c10"),
                            IconClass = "bi bi-cup-straw",
                            Name = "Mini Bar"
                        },
                        new
                        {
                            Id = new Guid("f7576a20-69d2-4d18-b106-eebbade1a1ab"),
                            IconClass = "bi bi-cup-hot",
                            Name = "Coffee Maker"
                        },
                        new
                        {
                            Id = new Guid("7e965fb4-da18-491f-bb3a-650dd0691df4"),
                            IconClass = "bi bi-wind",
                            Name = "Hair Dryer"
                        },
                        new
                        {
                            Id = new Guid("7f204c90-b29d-4394-a87b-646d75018090"),
                            IconClass = "bi bi-house",
                            Name = "Iron and Ironing Board"
                        },
                        new
                        {
                            Id = new Guid("3a8c0bdb-fba3-467e-80e9-8dccb80cba32"),
                            IconClass = "bi bi-safe",
                            Name = "Safe Deposit Box"
                        },
                        new
                        {
                            Id = new Guid("13128d3f-fb75-4443-8e5c-f3d7a13ce09a"),
                            IconClass = "bi bi-thermometer-sun",
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = new Guid("66faacfd-6506-4c51-a3d3-64cf0dadbe10"),
                            IconClass = "bi bi-table",
                            Name = "Work Desk"
                        },
                        new
                        {
                            Id = new Guid("2c6333a5-15f5-4798-a43c-3cdcbaff78ed"),
                            IconClass = "bi bi-basket",
                            Name = "Free Toiletries"
                        },
                        new
                        {
                            Id = new Guid("d27d9453-343c-42a8-83ec-e05beb6a7834"),
                            IconClass = "bi bi-bell",
                            Name = "Room Service"
                        },
                        new
                        {
                            Id = new Guid("79a4fb23-90ed-4169-ad3e-b51f223984e8"),
                            IconClass = "bi bi-patch-check",
                            Name = "Bathrobe and Slippers"
                        },
                        new
                        {
                            Id = new Guid("f58fad08-6372-409f-b24f-c16682e15e68"),
                            IconClass = "bi bi-droplet",
                            Name = "Complimentary Bottled Water"
                        },
                        new
                        {
                            Id = new Guid("327b9b36-6fc9-49c6-bad7-ef9825bd8bbc"),
                            IconClass = "bi bi-wifi",
                            Name = "High-Speed Internet"
                        },
                        new
                        {
                            Id = new Guid("4e439e05-b909-429b-b172-597682088a76"),
                            IconClass = "bi bi-slash",
                            Name = "Blackout Curtains"
                        },
                        new
                        {
                            Id = new Guid("9927fbe6-929a-4df4-a4f9-e66181a0a304"),
                            IconClass = "bi bi-volume-mute",
                            Name = "Soundproof Windows"
                        });
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("RoomTypes", (string)null);
                });

            modelBuilder.Entity("HotelHotelAmenity", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "HotelsId");

                    b.HasIndex("HotelsId");

                    b.ToTable("HotelHotelAmenities", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "29fb08be-b7a6-4d49-9c0d-1c917d2882af",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f603f8b1-8df0-4995-803c-6a3c18bbd4aa",
                            Name = "HotelAdmin",
                            NormalizedName = "HOTELADMIN"
                        },
                        new
                        {
                            Id = "34925736-eacb-4624-8934-2e8165c5e6ab",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "RoomTypesId");

                    b.HasIndex("RoomTypesId");

                    b.ToTable("RoomRoomAmenities", (string)null);
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.Room", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.RoomType", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.Hotel", "Hotel")
                        .WithMany("RoomTypes")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelHotelAmenity", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.HotelAmenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Core.Domain.Entities.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.RoomAmenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Core.Domain.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("RoomTypes");
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
