// <auto-generated />
using System;
using HotelBookingApp.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelBookingApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241105103010_Added_Room_Amenityies")]
    partial class Added_Room_Amenityies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StarRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Hotels", (string)null);
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.HotelAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("HotelAmenities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8980951c-3919-43d8-91b5-46fab173917f"),
                            IconClass = "bi bi-wifi",
                            Name = "Free Wi-Fi"
                        },
                        new
                        {
                            Id = new Guid("f372202b-a7fb-4ab2-a9a8-7817fd225045"),
                            IconClass = "bi bi-car-front",
                            Name = "Parking"
                        },
                        new
                        {
                            Id = new Guid("cd6a4764-9814-4658-8ecc-8d98ae73b5cd"),
                            IconClass = "bi bi-water",
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = new Guid("f31a60c9-579f-4821-932d-359e27fd100b"),
                            IconClass = "bi bi-bar-chart-line",
                            Name = "Fitness Center"
                        },
                        new
                        {
                            Id = new Guid("de0ce3ab-0678-4240-8e38-5f1f140b59d6"),
                            IconClass = "bi bi-shop",
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = new Guid("20755e4b-0ca2-47fb-9ac0-f1c54be98646"),
                            IconClass = "bi bi-house-door",
                            Name = "Room Service"
                        },
                        new
                        {
                            Id = new Guid("cf0eadb6-79c8-45e8-8afb-db18cec48431"),
                            IconClass = "bi bi-basket",
                            Name = "Laundry Service"
                        },
                        new
                        {
                            Id = new Guid("52ebb947-ad05-40b2-8a33-f01798ffeb60"),
                            IconClass = "bi bi-thermometer-sun",
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = new Guid("6fc5ab98-bf28-4fe0-8f10-4a5582b5adda"),
                            IconClass = "bi bi-briefcase",
                            Name = "Business Center"
                        },
                        new
                        {
                            Id = new Guid("fce910b9-d4ce-4434-8e1a-d0d399b45a01"),
                            IconClass = "bi bi-megaphone",
                            Name = "Conference Room"
                        },
                        new
                        {
                            Id = new Guid("a1beb60b-1d41-4b8a-bf5d-583e937d2867"),
                            IconClass = "bi bi-slash-circle",
                            Name = "Non-Smoking Rooms"
                        },
                        new
                        {
                            Id = new Guid("8047b725-d1a7-4f9a-b72f-76789d16349b"),
                            IconClass = "bi bi-airplane-engines",
                            Name = "Airport Shuttle"
                        });
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.RoomAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomAmenity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0de1a28-e88b-42af-9971-8a3baa489207"),
                            IconClass = "bi bi-tv",
                            Name = "Television"
                        },
                        new
                        {
                            Id = new Guid("899eb8bf-bf60-4105-a523-c1f267dbf5bf"),
                            IconClass = "bi bi-cup-straw",
                            Name = "Mini Bar"
                        },
                        new
                        {
                            Id = new Guid("5c2bde13-7e77-4844-830d-f006ca79d52d"),
                            IconClass = "bi bi-cup-hot",
                            Name = "Coffee Maker"
                        },
                        new
                        {
                            Id = new Guid("30e56da7-50c4-40d8-9632-c5fee69ee92d"),
                            IconClass = "bi bi-wind",
                            Name = "Hair Dryer"
                        },
                        new
                        {
                            Id = new Guid("be768501-89d0-4d3b-82a1-a6b7fd928789"),
                            IconClass = "bi bi-house",
                            Name = "Iron and Ironing Board"
                        },
                        new
                        {
                            Id = new Guid("465429ed-0024-4d59-89de-a25b85d9e6e2"),
                            IconClass = "bi bi-safe",
                            Name = "Safe Deposit Box"
                        },
                        new
                        {
                            Id = new Guid("20f38536-d36a-43ed-a9ee-c836746ec5ef"),
                            IconClass = "bi bi-thermometer-sun",
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = new Guid("0a969e83-6624-4832-8b38-363a3c8e437c"),
                            IconClass = "bi bi-table",
                            Name = "Work Desk"
                        },
                        new
                        {
                            Id = new Guid("57e3ad07-6880-42af-8bc1-4c407cd72b84"),
                            IconClass = "bi bi-basket",
                            Name = "Free Toiletries"
                        },
                        new
                        {
                            Id = new Guid("6cb94d74-ecca-4682-a4ae-739157b20e3c"),
                            IconClass = "bi bi-bell",
                            Name = "Room Service"
                        },
                        new
                        {
                            Id = new Guid("33fe5392-dd8f-470e-878d-68c26e36db33"),
                            IconClass = "bi bi-patch-check",
                            Name = "Bathrobe and Slippers"
                        },
                        new
                        {
                            Id = new Guid("aeea7768-ae4e-4178-a5a0-821abeabac35"),
                            IconClass = "bi bi-droplet",
                            Name = "Complimentary Bottled Water"
                        },
                        new
                        {
                            Id = new Guid("0c4edb96-b534-4c0c-a9e4-cca237054d6f"),
                            IconClass = "bi bi-wifi",
                            Name = "High-Speed Internet"
                        },
                        new
                        {
                            Id = new Guid("05736782-638f-46d3-b1b6-8d5a0778f7bf"),
                            IconClass = "bi bi-slash",
                            Name = "Blackout Curtains"
                        },
                        new
                        {
                            Id = new Guid("e6c3fb6f-12a6-4a7e-8fc8-60b7440935f0"),
                            IconClass = "bi bi-volume-mute",
                            Name = "Soundproof Windows"
                        });
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("RoomTypes", (string)null);
                });

            modelBuilder.Entity("HotelHotelAmenity", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "HotelsId");

                    b.HasIndex("HotelsId");

                    b.ToTable("HotelHotelAmenities", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "42db8436-53a6-472c-9226-ca7d1392c025",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "135aee72-c3f1-4fdb-8737-a74971e35751",
                            Name = "HotelAdmin",
                            NormalizedName = "HOTELADMIN"
                        },
                        new
                        {
                            Id = "ee745fae-3731-4cc1-a15e-793560bc0f8e",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "RoomTypesId");

                    b.HasIndex("RoomTypesId");

                    b.ToTable("RoomRoomAmenities", (string)null);
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.Room", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.RoomType", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.Hotel", "Hotel")
                        .WithMany("RoomTypes")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelHotelAmenity", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.HotelAmenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Core.Domain.Entities.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.HasOne("HotelBookingApp.Core.Domain.Entities.RoomAmenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Core.Domain.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("RoomTypes");
                });

            modelBuilder.Entity("HotelBookingApp.Core.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
